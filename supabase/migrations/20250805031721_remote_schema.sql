

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."copany" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"(),
    "name" "text",
    "description" "text",
    "github_url" "text",
    "logo_url" "text",
    "created_by" "uuid",
    "figma_url" "text",
    "telegram_url" "text",
    "discord_url" "text",
    "notion_url" "text",
    "apple_app_store_url" "text",
    "google_play_store_url" "text",
    "website_url" "text",
    "github_repository_id" "text",
    "is_connected_github" boolean DEFAULT false,
    "license" "text"
);


ALTER TABLE "public"."copany" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."copany_bot_installation" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "github_user_id" "text",
    "installation_id" "text",
    "target_type" smallint,
    "target_login" "text",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "repository_ids" "text"[]
);


ALTER TABLE "public"."copany_bot_installation" OWNER TO "postgres";


ALTER TABLE "public"."copany_bot_installation" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."copany_bot_installation_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."copany_contributor" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "copany_id" bigint,
    "user_id" "uuid",
    "contribution" integer DEFAULT 0,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "avatar_url" "text",
    "email" "text",
    "name" "text"
);


ALTER TABLE "public"."copany_contributor" OWNER TO "postgres";


ALTER TABLE "public"."copany_contributor" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."copany_contributors_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."copany" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."copany_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."issue" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "copany_id" bigint,
    "title" "text",
    "description" "text",
    "state" smallint DEFAULT '0'::smallint,
    "created_by" "uuid",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "closed_at" timestamp with time zone,
    "assignee" "uuid",
    "priority" smallint DEFAULT '0'::smallint,
    "level" smallint DEFAULT '0'::smallint,
    "assignee_request" "uuid",
    "assignee_invited" "uuid"
);


ALTER TABLE "public"."issue" OWNER TO "postgres";


ALTER TABLE "public"."issue" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."issue_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."copany_bot_installation"
    ADD CONSTRAINT "copany_bot_installation_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."copany_contributor"
    ADD CONSTRAINT "copany_contributors_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."copany"
    ADD CONSTRAINT "copany_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."copany_contributor"
    ADD CONSTRAINT "copany_contributors_copany_id_fkey" FOREIGN KEY ("copany_id") REFERENCES "public"."copany"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."copany_contributor"
    ADD CONSTRAINT "copany_contributors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."copany"
    ADD CONSTRAINT "copany_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_assignee_fkey" FOREIGN KEY ("assignee") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_assignee_invited_fkey" FOREIGN KEY ("assignee_invited") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_assignee_request_fkey" FOREIGN KEY ("assignee_request") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_copany_id_fkey" FOREIGN KEY ("copany_id") REFERENCES "public"."copany"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."issue"
    ADD CONSTRAINT "issue_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



CREATE POLICY "Enable delete for users based on created_by" ON "public"."copany" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."issue" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "created_by"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."copany" FOR INSERT TO "authenticated" WITH CHECK (("created_by" = "auth"."uid"()));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."copany_contributor" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."issue" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."copany" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."copany_contributor" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."issue" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated users only" ON "public"."issue" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable update for users based on created_by" ON "public"."copany" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "created_by")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "created_by"));



CREATE POLICY "all for service_role" ON "public"."copany_bot_installation" TO "service_role" USING (true) WITH CHECK (true);



ALTER TABLE "public"."copany" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."copany_bot_installation" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."copany_contributor" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."issue" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."copany" TO "anon";
GRANT ALL ON TABLE "public"."copany" TO "authenticated";
GRANT ALL ON TABLE "public"."copany" TO "service_role";



GRANT ALL ON TABLE "public"."copany_bot_installation" TO "anon";
GRANT ALL ON TABLE "public"."copany_bot_installation" TO "authenticated";
GRANT ALL ON TABLE "public"."copany_bot_installation" TO "service_role";



GRANT ALL ON SEQUENCE "public"."copany_bot_installation_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."copany_bot_installation_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."copany_bot_installation_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."copany_contributor" TO "anon";
GRANT ALL ON TABLE "public"."copany_contributor" TO "authenticated";
GRANT ALL ON TABLE "public"."copany_contributor" TO "service_role";



GRANT ALL ON SEQUENCE "public"."copany_contributors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."copany_contributors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."copany_contributors_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."copany_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."copany_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."copany_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."issue" TO "anon";
GRANT ALL ON TABLE "public"."issue" TO "authenticated";
GRANT ALL ON TABLE "public"."issue" TO "service_role";



GRANT ALL ON SEQUENCE "public"."issue_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."issue_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."issue_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
